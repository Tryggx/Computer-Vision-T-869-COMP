import cv2
import numpy as np
import random
import time

rho = 1 # distance resolution in pixels of the Hough grid
theta = np.pi/180 # angular resolution in radians of the Hough grid
threshold = 2     # minimum number of votes (intersections in Hough grid cell)
min_line_length = 40  #minimum number of pixels making up a line
max_line_gap = 10    # maximum gap in pixels between connectable line segments

def angle_between_lines(line1, line2):
    """Calculate the angle between two lines in degrees."""
    slope1 = line_slope(line1)
    slope2 = line_slope(line2)
    
    tan_angle = abs((slope2 - slope1) / (1 + slope1 * slope2))
    angle = np.arctan(tan_angle) * (180 / np.pi)  # Convert radian to degree
    
    print(angle)
    return angle

def line_slope(line):
    """Calculate the slope of a line."""
    x1, y1, x2, y2 = line[0]
    return (y2 - y1) / (x2 - x1) if (x2 - x1) != 0 else float('inf')

def is_close_to_end(point, line, threshold=10):
    """Check if the point is within `threshold` distance of any end of the line."""
    x1, y1, x2, y2 = line[0]
    dist_to_start = np.sqrt((x1 - point[0])**2 + (y1 - point[1])**2)
    dist_to_end = np.sqrt((x2 - point[0])**2 + (y2 - point[1])**2)
    return dist_to_start < threshold or dist_to_end < threshold




def line_intersection(line1, line2):
    x1, y1, x2, y2 = line1[0]
    x3, y3, x4, y4 = line2[0]
    #draw line on frame in blue
    cv2.line(frame, (x1,y1), (x2,y2), (255,0,0), 2)
    cv2.line(frame, (x3,y3), (x4,y4), (255,0,0), 2)

    # Handling vertical lines
    if x1 == x2 and x3 == x4:  # Both lines are vertical
        return None
    if x1 == x2:  # Line1 is vertical
        m2 = (y4 - y3) / (x4 - x3)
        c2 = y3 - m2 * x3
        x = x1
        y = m2 * x1 + c2
        return x, y
    if x3 == x4:  # Line2 is vertical
        m1 = (y2 - y1) / (x2 - x1)
        c1 = y1 - m1 * x1
        x = x3
        y = m1 * x3 + c1
        return x, y
    
    xdiff = (x1 - x2, x3 - x4)
    ydiff = (y1 - y2, y3 - y4)

    d = np.linalg.det([xdiff, ydiff])

    if d == 0:
        return None
    x = np.linalg.det([[x1, y1], [x2, y2]]) * xdiff[1] - np.linalg.det([[x3, y3], [x4, y4]]) * xdiff[0]
    y = np.linalg.det([[x1, y1], [x2, y2]]) * ydiff[1] - np.linalg.det([[x3, y3], [x4, y4]]) * ydiff[0]
    x /= d
    y /= d

    if x < 0 or y < 0 or x > 600 or y > 450:
        return None
    #cv2.circle(frame, (int(x), int(y)), 5,(255,0,255), -1) # top left is red
#     
#     #check if point is on the fram
    buffer = 10
    point = (x, y)
    if is_close_to_end(point, line1, buffer) and is_close_to_end(point, line2, buffer) and is_within_line(x, y, line1[0], buffer) and is_within_line(x, y, line2[0], buffer):        
        return (x, y)
    return None

    
    #write point on frame in pink



def is_within_line(x, y, line, buffer):
    """Check if a point is within a line segment with a buffer."""
    x1, y1, x2, y2 = line
    # Apply buffer
    if x1 > x2:
        x1, x2 = x2, x1
    x1 -= buffer
    x2 += buffer

    if y1 > y2:
        y1, y2 = y2, y1
    y1 -= buffer
    y2 += buffer

    return x1 <= x <= x2 and y1 <= y <= y2
    
def houghTransform(edges):
    line_image = np.copy(edges)*0 # creating a blank to draw lines on
    # Hough Transform
    # Output "lines" is an array containing endpoints of detected line segments
    lines = cv2.HoughLinesP(edges, rho, theta, threshold, np.array([]),
                                min_line_length, max_line_gap)
    if lines is None:
        return line_image, []
    return line_image, lines

def find_intersections(lines, distance_thresh=10):
    intersections = []
    for i in range(len(lines)):
        for j in range(i+1, len(lines)):
            line1 = lines[i]
            line2 = lines[j]
            angle = angle_between_lines(line1, line2)
            #print angle in degrees
            # print(angle)
            if angle is not None and 90 <= np.degrees(angle) <= 100  :
                # print(np.degrees(angle))
                #change line into vector
                intersect = line_intersection(line1, line2)
                # In find_intersections
    for i in range(len(lines)):
        for j in range(i+1, len(lines)):
            line1 = lines[i]
            line2 = lines[j]
            #change line into vector

            intersect = line_intersection(line1, line2)
            # In find_intersections
        # Rest of your intersection code
            if intersect is not None:
                # Check if this intersection is too close to others
                if not any(np.linalg.norm(np.array(intersect) - np.array(other_intersect)) < distance_thresh for other_intersect in intersections):
                #     if intersect[0] < 0 or intersect[1] < 0:
                #         print(intersect)
                #         continue
                    
                     intersections.append(intersect)
    return intersections

def order_points(pts):
    #write points on frame in green
    # print(pts)
    for pt in pts:
        cv2.circle(frame, (int(pt[0]), int(pt[1])), 5,(0,255,0), -1)
    top_left = min(pts, key=lambda x: x[0] + x[1]) #top right
    bottom_right = max(pts, key=lambda x: x[0] + x[1]) #bottom left
    top_right = min(pts, key=lambda x: x[0] - x[1]) #bottom right
    bottom_left = max(pts, key=lambda x: x[0] - x[1]) #top left

    rect = np.array([top_left, top_right, bottom_right, bottom_left], dtype="float32")
    return rect

def transform_region(frame, points):
    ordered_points = order_points(points)
    # print(len(ordered_points))
    if len(ordered_points) != 4:
        return None, ordered_points  # Not enough points for a transformation

    # Now ordered_points have 4 points in the order [top-left, top-right, bottom-right, bottom-left]
    rect = np.array(ordered_points, dtype="float32")

    # Destination points
    maxWidth, maxHeight = 300, 300  # Example dimensions
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")

   
    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(frame, M, (maxWidth, maxHeight))
    return warped, ordered_points


    

cap = cv2.VideoCapture(0)
frame = None
while(True):
    time1 = cv2.getTickCount()
    #slow down reading from the camera to 1 fps

    ret, frame = cap.read()
    #sleep for 1 second
    # time.sleep(0.5)

    

    edges = cv2.Canny(frame, 450, 550)

    #draw lines on the frame that intersect with the edges
    line_image, lines = houghTransform(edges)
   
    if lines is not None:
        intersections = find_intersections(lines)
        # if len(intersections) > 0:
            # print(len(intersections))
        if len(intersections) >= 4:
            # Assuming intersections has the coordinates of the corners
            transformed_image, pnts = transform_region(frame, intersections)
            # print(transformed_image)
            if transformed_image is not None:
                cv2.imshow('Transformed', transformed_image)
            if pnts is not None:
                if len(pnts) == 4:
                    cv2.polylines(frame, np.int32([pnts]), True, (0, 255, 0), 2)

                 
        # for line in lines:
        #     for x1,y1,x2,y2 in line:
        #         cv2.line(frame, (x1,y1), (x2,y2), (0,0,255), 2)



    time2 = cv2.getTickCount()
    calc_time = (time2 - time1) / cv2.getTickFrequency() * 1000
    fps = cv2.getTickFrequency() / (cv2.getTickCount() - time1)
    cv2.putText(frame, "Latency: " + str(int(calc_time)) + " ms", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 255), 2)
    cv2.putText(frame, "FPS: " + str(int(fps)), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 255), 2)
    #cv2.imshow('hough',line_image)
    
    cv2.imshow('frame', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
